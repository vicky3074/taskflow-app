name: CI/CD Pipeline with Dual Deployment

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Code Quality & Testing
  test:
    name: Test & Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint || echo "Linting step completed"
      
    - name: Run tests
      run: npm test
      
    - name: Build application
      run: npm run build

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true

  # Docker Build & Test
  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: docker build -t taskflow-app:test .
      
    - name: Test Docker image
      run: |
        docker run -d --name test-container -p 3000:3000 taskflow-app:test
        sleep 10
        curl -f http://localhost:3000/health || exit 1
        docker stop test-container
        docker rm test-container

  # Deploy to DigitalOcean with Dual Method
  deploy:
    name: Deploy to DigitalOcean (Webhook + SSH Backup)
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    # PRIMARY METHOD: SSH Deployment with Vault
    - name: üîê Get SSH Key from HCP Vault Secrets
      id: ssh_deploy_prep
      continue-on-error: true
      run: |
        echo "üîê Authenticating with HCP Vault Secrets..."
        
        # Get access token using service principal (HCP Vault Dynamic Secrets)
        TOKEN_RESPONSE=$(curl -s -X POST "${{ secrets.VAULT_ADDR }}/v1/auth/jwt/login" \
          -H "Content-Type: application/json" \
          -d "{\"client_id\": \"${{ secrets.VAULT_CLIENT_ID }}\", \"client_secret\": \"${{ secrets.VAULT_CLIENT_SECRET }}\"}")
        
        ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.auth.client_token // empty')
        
        if [ -z "$ACCESS_TOKEN" ] || [ "$ACCESS_TOKEN" = "null" ]; then
          echo "‚ùå Failed to get access token from HCP Vault"
          echo "Response: $TOKEN_RESPONSE"
          exit 1
        fi
        
        echo "‚úÖ Successfully authenticated with HCP Vault"
        
        # Retrieve SSH key using tested Python JSON parsing solution
        echo "üîë Retrieving SSH key from HCP Vault Secrets..."
        SSH_RESPONSE=$(curl -s -H "Authorization: Bearer $ACCESS_TOKEN" \
          "${{ secrets.VAULT_ADDR }}/secrets/ssh_key:open")
        
        echo "üêç Parsing SSH key using Python (robust JSON handling)..."
        echo "$SSH_RESPONSE" | python3 -c "
import json
import sys
import os

try:
    # Read SSH response from stdin
    ssh_response = sys.stdin.read()
    response_data = json.loads(ssh_response)
    print('‚úÖ JSON parsed successfully')
    
    # Extract SSH key from the response
    ssh_key = response_data['secret']['static_version']['value']
    print('‚úÖ SSH key extracted successfully')
    print('SSH key starts with: ' + ssh_key[:50] + '...')
    
    # Write to GitHub environment using proper multi-line format
    with open(os.environ['GITHUB_ENV'], 'a') as f:
        f.write('SSH_PRIVATE_KEY<<EOF\n' + ssh_key + '\nEOF\n')
    
    print('‚úÖ SSH key added to GitHub environment')
    
except json.JSONDecodeError as e:
    print('‚ùå JSON parsing error:', str(e))
    print('Raw response:', ssh_response[:200] + '...')
    sys.exit(1)
except KeyError as e:
    print('‚ùå Key not found in response:', str(e))
    available_keys = list(response_data.keys()) if 'response_data' in locals() else 'unknown'
    print('Available keys:', available_keys)
    sys.exit(1)
except Exception as e:
    print('‚ùå Unexpected error:', str(e))
    sys.exit(1)
        "
        
        if [ $? -eq 0 ]; then
          echo "‚úÖ Successfully retrieved and parsed SSH key from HCP Vault"
        else
          echo "‚ùå Failed to retrieve SSH key from HCP Vault"
          exit 1
        fi

    # PRIMARY METHOD: SSH Deployment (Vault-Powered)
    - name: üîë Primary - SSH Deployment (Vault-Powered)
      id: ssh_deploy
      if: steps.ssh_deploy_prep.outcome == 'success'
      continue-on-error: true
      run: |
        echo "üîë Attempting SSH deployment..."
        
        # Attempt SSH deployment
        if ssh -i <(echo "$SSH_PRIVATE_KEY") -o StrictHostKeyChecking=no root@${{ secrets.DROPLET_IP }} "
          echo 'üîë Starting SSH deployment...'
          cd /var/www/taskflow-app || exit 1
          git pull origin main || exit 1
          docker compose down
          docker compose up -d --build
          sleep 30
          curl -f http://localhost/health || exit 1
          echo '‚úÖ SSH deployment successful!'
        "; then
          echo "ssh_success=true" >> $GITHUB_OUTPUT
          echo "‚úÖ SSH primary deployment successful!"
        else
          echo "ssh_success=false" >> $GITHUB_OUTPUT
          echo "‚ùå SSH deployment failed, will try webhook backup..."
          exit 1
        fi

    # BACKUP METHOD: Webhook Deployment (if SSH unavailable or fails)
    - name: üöÄ Backup - Webhook Deployment
      if: always() && (steps.ssh_deploy_prep.outcome != 'success' || steps.ssh_deploy.outcome != 'success')
      id: webhook_deploy
      run: |
        echo "üöÄ SSH failed, attempting webhook backup deployment..."
        
        # Try enhanced webhook first
        if curl -X POST \
          -H "Content-Type: application/json" \
          -H "User-Agent: GitHub-Actions" \
          -d '{
            "repository": "${{ github.repository }}", 
            "ref": "${{ github.ref }}",
            "sha": "${{ github.sha }}",
            "pusher": "${{ github.actor }}"
          }' \
          "http://${{ secrets.DROPLET_IP }}:9000/hooks/deploy-taskflow"; then
          echo "webhook_success=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Enhanced webhook backup deployment successful!"
        elif curl -f "http://${{ secrets.DROPLET_IP }}:3000/deploy?token=taskflow-deploy-2025"; then
          echo "webhook_success=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Simple webhook backup deployment successful!"
        else
          echo "webhook_success=false" >> $GITHUB_OUTPUT
          echo "‚ùå Both SSH and webhook deployments failed!"
          exit 1
        fi

    # Verify Deployment Success
    - name: üè• Verify Deployment
      run: |
        echo "üè• Performing final deployment verification..."
        sleep 10
        
        if curl -f "http://${{ secrets.DROPLET_IP }}/health"; then
          echo "‚úÖ Deployment verification successful!"
          echo "üåç Application is live at: http://${{ secrets.DROPLET_IP }}"
        else
          echo "‚ùå Deployment verification failed!"
          exit 1
        fi

    # Deployment Status Notification
    - name: üìä Deployment Summary
      if: always()
      run: |
        echo "üìä === DEPLOYMENT SUMMARY ==="
        echo "Repository: ${{ github.repository }}"
        echo "Commit SHA: ${{ github.sha }}"
        echo "Pushed by: ${{ github.actor }}"
        echo "SSH Success: ${{ steps.ssh_deploy.outcome }}"
        echo "Webhook Success: ${{ steps.webhook_deploy.outputs.webhook_success }}"
        echo "Deployment Method: $([ '${{ steps.ssh_deploy.outcome }}' = 'success' ] && echo 'SSH Primary' || echo 'Webhook Backup')"
        
        if [ "${{ job.status }}" == "success" ]; then
          echo "üéâ DEPLOYMENT SUCCESSFUL!"
          echo "üîó Live URL: http://${{ secrets.DROPLET_IP }}"
          echo "üê≥ Portainer: https://${{ secrets.DROPLET_IP }}:9443"
          echo "üîê SSH key sourced from Vault for backup deployment"
        else
          echo "‚ùå DEPLOYMENT FAILED!"
          echo "üìã Check logs above for details"
        fi
