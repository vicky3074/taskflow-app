name: CI/CD Pipeline with Dual Deployment

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Code Quality & Testing
  test:
    name: Test & Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint || echo "Linting step completed"
      
    - name: Run tests
      run: npm test
      
    - name: Build application
      run: npm run build

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true

  # Docker Build & Test
  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: docker build -t taskflow-app:test .
      
    - name: Test Docker image
      run: |
        docker run -d --name test-container -p 3000:3000 taskflow-app:test
        sleep 10
        curl -f http://localhost:3000/health || exit 1
        docker stop test-container
        docker rm test-container

  # Deploy to DigitalOcean with Dual Method
  deploy:
    name: Deploy to DigitalOcean (Webhook + SSH Backup)
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    # STEP 1: Authenticate with HCP Vault Secrets
    - name: üîê Step 1 - Authenticate with HCP Vault Secrets
      id: vault_auth
      continue-on-error: true
      run: |
        echo "üîê Step 1: Authenticating with HCP Vault Secrets API..."
        
        TOKEN_RESPONSE=$(curl -s -X POST "https://auth.idp.hashicorp.com/oauth2/token" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "grant_type=client_credentials&client_id=${{ secrets.VAULT_CLIENT_ID }}&client_secret=${{ secrets.VAULT_CLIENT_SECRET }}&audience=https://api.hashicorp.cloud&scope=https://api.hashicorp.cloud")
        
        ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.access_token // empty')
        
        if [ -z "$ACCESS_TOKEN" ] || [ "$ACCESS_TOKEN" = "null" ]; then
          echo "‚ùå Step 1 FAILED: Authentication failed"
          echo "Response: $TOKEN_RESPONSE"
          exit 1
        fi
        
        echo "‚úÖ Step 1 SUCCESS: Authentication completed"
        echo "Token length: ${#ACCESS_TOKEN}"
        echo "vault_token=$ACCESS_TOKEN" >> $GITHUB_OUTPUT

    # STEP 2: Retrieve SSH Key from Vault
    - name: üîë Step 2 - Retrieve SSH Key from Vault
      id: vault_retrieve
      if: steps.vault_auth.outcome == 'success'
      continue-on-error: true
      run: |
        echo "üîë Step 2: Retrieving SSH key from HCP Vault Secrets..."
        
        SSH_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ steps.vault_auth.outputs.vault_token }}" \
          "https://api.cloud.hashicorp.com/secrets/2023-11-28/organizations/b9aa686e-3fc3-4436-8cae-1186bfa28a7f/projects/6edfe380-4a09-4778-861b-76572e60f123/apps/taskflow-prod/secrets/ssh_key:open")
        
        echo "Response length: $(echo "$SSH_RESPONSE" | wc -c) bytes"
        
        if [ $(echo "$SSH_RESPONSE" | wc -c) -lt 100 ]; then
          echo "‚ùå Step 2 FAILED: Response too short"
          echo "Response: $SSH_RESPONSE"
          exit 1
        fi
        
        echo "‚úÖ Step 2 SUCCESS: SSH key response received"
        echo "$SSH_RESPONSE" > /tmp/ssh_response.json

    # STEP 3: Parse SSH Key with Python
    - name: üêç Step 3 - Parse SSH Key with Python
      id: ssh_parse
      if: steps.vault_retrieve.outcome == 'success'
      continue-on-error: true
      run: |
        echo "üêç Step 3: Parsing SSH key with Python..."
        
        SSH_KEY=$(python3 -c "import json; f=open('/tmp/ssh_response.json'); data=json.load(f); f.close(); ssh_key=data['secret']['static_version']['value'].replace('\\\\n', '\n'); print(ssh_key)")
        
        if [ $? -ne 0 ] || [ -z "$SSH_KEY" ]; then
          echo "‚ùå Step 3 FAILED: Python parsing failed"
          echo "JSON content preview:"
          head -c 200 /tmp/ssh_response.json
          exit 1
        fi
        
        echo "‚úÖ Step 3 SUCCESS: SSH key parsed"
        echo "SSH key starts with: $(echo "$SSH_KEY" | head -1)"
        echo "SSH key line count: $(echo "$SSH_KEY" | wc -l)"
        
        # Save to GitHub environment
        echo "SSH_PRIVATE_KEY<<EOF" >> $GITHUB_ENV
        echo "$SSH_KEY" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    # STEP 4: Validate SSH Key Format
    - name: üîç Step 4 - Validate SSH Key Format
      id: ssh_validate
      if: steps.ssh_parse.outcome == 'success'
      continue-on-error: true
      run: |
        echo "üîç Step 4: Validating SSH key format..."
        
        # Save SSH key to temporary file
        echo "$SSH_PRIVATE_KEY" > /tmp/test_ssh_key
        chmod 600 /tmp/test_ssh_key
        
        # Validate SSH key format
        if ssh-keygen -l -f /tmp/test_ssh_key >/dev/null 2>&1; then
          echo "‚úÖ Step 4 SUCCESS: SSH key format is valid"
          ssh-keygen -l -f /tmp/test_ssh_key
        else
          echo "‚ùå Step 4 FAILED: Invalid SSH key format"
          echo "Key preview:"
          head -3 /tmp/test_ssh_key
          exit 1
        fi

    # STEP 5: Test SSH Connection
    - name: üîó Step 5 - Test SSH Connection
      id: ssh_connect
      if: steps.ssh_validate.outcome == 'success'
      continue-on-error: true
      run: |
        echo "üîó Step 5: Testing SSH connection..."
        
        echo "$SSH_PRIVATE_KEY" > /tmp/deploy_key
        chmod 600 /tmp/deploy_key
        
        # Test basic SSH connection
        if ssh -i /tmp/deploy_key -o ConnectTimeout=10 -o StrictHostKeyChecking=no root@${{ secrets.DROPLET_IP }} "echo 'SSH connection successful'" 2>/dev/null; then
          echo "‚úÖ Step 5 SUCCESS: SSH connection established"
        else
          echo "‚ùå Step 5 FAILED: SSH connection failed"
          echo "Testing with verbose output:"
          ssh -i /tmp/deploy_key -o ConnectTimeout=10 -o StrictHostKeyChecking=no -v root@${{ secrets.DROPLET_IP }} "echo 'test'" 2>&1 | head -10
          exit 1
        fi

    # STEP 6: Full SSH Deployment
    - name: üöÄ Step 6 - Full SSH Deployment
      id: ssh_deploy
      if: steps.ssh_connect.outcome == 'success'
      continue-on-error: true
      run: |
        echo "üöÄ Step 6: Executing full SSH deployment..."
        
        echo "$SSH_PRIVATE_KEY" > /tmp/deploy_key
        chmod 600 /tmp/deploy_key
        
        # Execute deployment commands via SSH
        if ssh -i /tmp/deploy_key -o StrictHostKeyChecking=no root@${{ secrets.DROPLET_IP }} "
          echo 'üîë Starting SSH deployment...'
          cd /var/www/taskflow-app || exit 1
          git pull origin main || exit 1
          docker compose down
          docker compose up -d --build
          sleep 30
          curl -f http://localhost/health || exit 1
          echo '‚úÖ SSH deployment successful!'
        "; then
          echo "ssh_success=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Step 6 SUCCESS: SSH deployment completed!"
        else
          echo "ssh_success=false" >> $GITHUB_OUTPUT
          echo "‚ùå Step 6 FAILED: SSH deployment failed"
          exit 1
        fi

    # STEP 7: Deployment Status Summary
    - name: üìä Step 7 - Deployment Steps Summary
      if: always()
      run: |
        echo "üìä SSH Deployment Steps Summary:"
        echo "================================="
        echo "Step 1 - Authentication: ${{ steps.vault_auth.outcome }}"
        echo "Step 2 - SSH Key Retrieval: ${{ steps.vault_retrieve.outcome }}"
        echo "Step 3 - Python Parsing: ${{ steps.ssh_parse.outcome }}"
        echo "Step 4 - SSH Key Validation: ${{ steps.ssh_validate.outcome }}"
        echo "Step 5 - SSH Connection Test: ${{ steps.ssh_connect.outcome }}"
        echo "Step 6 - SSH Deployment: ${{ steps.ssh_deploy.outcome }}"
        echo ""
        if [ "${{ steps.ssh_deploy.outcome }}" = "success" ]; then
          echo "üéâ SSH DEPLOYMENT SUCCESSFUL!"
          echo "All steps completed successfully"
        else
          echo "‚ö†Ô∏è SSH deployment failed at step:"
          [ "${{ steps.vault_auth.outcome }}" != "success" ] && echo "  - Step 1: Authentication"
          [ "${{ steps.vault_retrieve.outcome }}" != "success" ] && echo "  - Step 2: SSH Key Retrieval"
          [ "${{ steps.ssh_parse.outcome }}" != "success" ] && echo "  - Step 3: Python Parsing"
          [ "${{ steps.ssh_validate.outcome }}" != "success" ] && echo "  - Step 4: SSH Key Validation"
          [ "${{ steps.ssh_connect.outcome }}" != "success" ] && echo "  - Step 5: SSH Connection"
          [ "${{ steps.ssh_deploy.outcome }}" != "success" ] && echo "  - Step 6: SSH Deployment"
          echo "Falling back to webhook deployment..."
        fi

    # BACKUP METHOD: Webhook Deployment (if SSH unavailable or fails)
    - name: üöÄ Backup - Webhook Deployment
      if: always() && steps.ssh_deploy.outcome != 'success'
      id: webhook_deploy
      run: |
        echo "üöÄ SSH failed, attempting webhook backup deployment..."
        
        # Try enhanced webhook first
        if curl -X POST \
          -H "Content-Type: application/json" \
          -H "User-Agent: GitHub-Actions" \
          -d '{
            "repository": "${{ github.repository }}", 
            "ref": "${{ github.ref }}",
            "sha": "${{ github.sha }}",
            "pusher": "${{ github.actor }}"
          }' \
          "http://${{ secrets.DROPLET_IP }}:9000/hooks/deploy-taskflow"; then
          echo "webhook_success=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Enhanced webhook backup deployment successful!"
        elif curl -f "http://${{ secrets.DROPLET_IP }}:3000/deploy?token=taskflow-deploy-2025"; then
          echo "webhook_success=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Simple webhook backup deployment successful!"
        else
          echo "webhook_success=false" >> $GITHUB_OUTPUT
          echo "‚ùå Both SSH and webhook deployments failed!"
          exit 1
        fi

    # Verify Deployment Success
    - name: üè• Verify Deployment
      run: |
        echo "üè• Performing final deployment verification..."
        sleep 10
        
        if curl -f "http://${{ secrets.DROPLET_IP }}/health"; then
          echo "‚úÖ Deployment verification successful!"
          echo "üåç Application is live at: http://${{ secrets.DROPLET_IP }}"
        else
          echo "‚ùå Deployment verification failed!"
          exit 1
        fi

    # Deployment Status Notification
    - name: üìä Deployment Summary
      if: always()
      run: |
        echo "üìä === DEPLOYMENT SUMMARY ==="
        echo "Repository: ${{ github.repository }}"
        echo "Commit SHA: ${{ github.sha }}"
        echo "Pushed by: ${{ github.actor }}"
        echo "SSH Success: ${{ steps.ssh_deploy.outcome }}"
        echo "Webhook Success: ${{ steps.webhook_deploy.outputs.webhook_success }}"
        echo "Deployment Method: $([ '${{ steps.ssh_deploy.outcome }}' = 'success' ] && echo 'SSH Primary' || echo 'Webhook Backup')"
        
        if [ "${{ job.status }}" == "success" ]; then
          echo "üéâ DEPLOYMENT SUCCESSFUL!"
          echo "üîó Live URL: http://${{ secrets.DROPLET_IP }}"
          echo "üê≥ Portainer: https://${{ secrets.DROPLET_IP }}:9443"
          echo "üîê SSH key sourced from Vault for backup deployment"
        else
          echo "‚ùå DEPLOYMENT FAILED!"
          echo "üìã Check logs above for details"
        fi
